services:
  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: au_lac_mysql
    restart: unless-stopped
    environment:
      MYSQL_ROOT_PASSWORD: root_password
      MYSQL_DATABASE: au_lac_db
      MYSQL_USER: au_lac_user
      MYSQL_PASSWORD: au_lac_password
    ports:
      - "0.0.0.0:3307:3306"  # Bind to all network interfaces
    volumes:
      - mysql_data:/var/lib/mysql
      - ./Database/init:/docker-entrypoint-initdb.d
    networks:
      - au_lac_network
    command: --default-authentication-plugin=mysql_native_password

  # Redis for sessions and cache
  redis:
    image: redis:7-alpine
    container_name: au_lac_redis
    restart: unless-stopped
    ports:
      - "0.0.0.0:6379:6379"  # Bind to all network interfaces
    volumes:
      - redis_data:/data
    networks:
      - au_lac_network
    command: redis-server --appendonly yes

  # PHPMyAdmin
  phpmyadmin:
    image: phpmyadmin/phpmyadmin:latest
    container_name: au_lac_phpmyadmin
    restart: unless-stopped
    environment:
      PMA_HOST: mysql
      PMA_PORT: 3306
      PMA_USER: root
      PMA_PASSWORD: root_password
      MYSQL_ROOT_PASSWORD: root_password
    ports:
      - "0.0.0.0:8080:80"  # Bind to all network interfaces
    depends_on:
      - mysql
    networks:
      - au_lac_network

  # Laravel Application
  laravel:
    build:
      context: ./Laravel
      dockerfile: Dockerfile
    container_name: au_lac_laravel
    restart: unless-stopped
    ports:
      - "0.0.0.0:8000:8000"  # Bind to all network interfaces
    volumes:
      - ./Laravel:/var/www/html
      - ./Laravel/storage:/var/www/html/storage
    environment:
      - DB_HOST=mysql
      - DB_DATABASE=au_lac_db
      - DB_USERNAME=au_lac_user
      - DB_PASSWORD=au_lac_password
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_DRIVER=redis
      - SESSION_DRIVER=redis
      - SESSION_LIFETIME=120
    depends_on:
      - mysql
      - redis
    networks:
      - au_lac_network
    command: php artisan serve --host=0.0.0.0 --port=8000
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # WordPress
  wordpress:
    build:
      context: ./Wordpress
      dockerfile: Dockerfile
    container_name: au_lac_wordpress
    restart: unless-stopped
    ports:
      - "0.0.0.0:8081:80"  # Bind to all network interfaces
    volumes:
      - ./Wordpress:/var/www/html
      - wordpress_uploads:/var/www/html/wp-content/uploads
    environment:
      - WORDPRESS_DB_HOST=mysql
      - WORDPRESS_DB_NAME=au_lac_db
      - WORDPRESS_DB_USER=au_lac_user
      - WORDPRESS_DB_PASSWORD=au_lac_password
      - WORDPRESS_TABLE_PREFIX=wp_
      - WORDPRESS_DEBUG=1
      - WORDPRESS_FTP_HOST=localhost
      - WORDPRESS_FTP_USER=www-data
      - WORDPRESS_FTP_PASS=
      - WORDPRESS_FTP_BASE=/var/www/html/
      - WORDPRESS_FTP_SSL=false
    depends_on:
      - mysql
    networks:
      - au_lac_network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:80"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

volumes:
  mysql_data:
    driver: local
  redis_data:
    driver: local
  wordpress_uploads:
    driver: local

networks:
  au_lac_network:
    driver: bridge
